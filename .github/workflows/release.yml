name: Release

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-upload:
    name: Build and Upload
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: jj-spr
            asset_name: jj-spr-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: jj-spr
            asset_name: jj-spr-linux-x86_64-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: jj-spr
            asset_name: jj-spr-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: jj-spr
            asset_name: jj-spr-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: jj-spr.exe
            asset_name: jj-spr-windows-x86_64.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            sudo apt-get install -y musl-tools
          fi

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install pkg-config openssl

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "spr -> target"
          key: ${{ matrix.target }}

      - name: Build release binary
        run: |
          cd spr
          cargo build --release --target ${{ matrix.target }}

      - name: Compress binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cd spr/target/${{ matrix.target }}/release
          tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}

      - name: Compress binary (Windows)
        if: runner.os == 'Windows'
        run: |
          cd spr/target/${{ matrix.target }}/release
          7z a ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}

      - name: Upload release asset (Unix)
        if: runner.os != 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: spr/target/${{ matrix.target }}/release/${{ matrix.asset_name }}.tar.gz
          asset_name: ${{ matrix.asset_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload release asset (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: spr/target/${{ matrix.target }}/release/${{ matrix.asset_name }}.zip
          asset_name: ${{ matrix.asset_name }}.zip
          asset_content_type: application/zip